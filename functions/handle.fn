action=$( printf "%s\n" "$ACTION" | tr 'A-Z' 'a-z' )

## If the first argument is "command", run the rest of the arguments
## using todo.sh builtins.
## Else, run a actions script with the name of the command if it exists
## or fallback to using a builtin
if [ "$action" == command ]
then
    ## Get rid of "command" from arguments list
    shift
    ## Reset action to new first argument
    action=$( printf "%s\n" "$1" | tr 'A-Z' 'a-z' )
elif [ -d "$TODO_ACTIONS_DIR" -a -x "$TODO_ACTIONS_DIR/$action" ]
then
    "$TODO_ACTIONS_DIR/$action" "$@"
    status=$?
    cleanup
    exit $status
fi

## Only run if $action isn't found in .todo.actions.d
case $action in
"add" | "a")
    if [[ -z "$2" && $TODOTXT_FORCE = 0 ]]; then
        echo -n "Add: "
        read input
    else
        [ -z "$2" ] && die "usage: $TODO_SH add \"TODO ITEM\""
        shift
        input=$*
    fi
    _addto "$TODO_FILE" "$input"
    ;;

"addm")
    if [[ -z "$2" && $TODOTXT_FORCE = 0 ]]; then
        echo -n "Add: "
        read input
    else
        [ -z "$2" ] && die "usage: $TODO_SH addm \"TODO ITEM\""
        shift
        input=$*
    fi

    # Set Internal Field Seperator as newline so we can 
    # loop across multiple lines
    SAVEIFS=$IFS
    IFS=$'\n'

    # Treat each line seperately
    for line in $input ; do
        _addto "$TODO_FILE" "$line"
    done
    IFS=$SAVEIFS
    ;;

"addto" )
    [ -z "$2" ] && die "usage: $TODO_SH addto DEST \"TODO ITEM\""
    dest="$TODO_DIR/$2"
    [ -z "$3" ] && die "usage: $TODO_SH addto DEST \"TODO ITEM\""
    shift
    shift
    input=$*

    if [ -f "$dest" ]; then
        _addto "$dest" "$input"
    else
        die "TODO: Destination file $dest does not exist."
    fi
    ;;

"append" | "app" )
    errmsg="usage: $TODO_SH append ITEM# \"TEXT TO APPEND\""
    shift; item=$1; shift

    [ -z "$item" ] && die "$errmsg"
    [[ "$item" = +([0-9]) ]] || die "$errmsg"
    todo=$(sed "$item!d" "$TODO_FILE")
    [ -z "$todo" ] && die "TODO: No task $item."
    if [[ -z "$1" && $TODOTXT_FORCE = 0 ]]; then
        echo -n "Append: "
        read input
    else
        input=$*
    fi
    case "$input" in
      [$SENTENCE_DELIMITERS]*)  appendspace=;;
      *)                        appendspace=" ";;
    esac
    cleaninput "for sed"

    if sed -i.bak $item" s|^.*|&${appendspace}${input}|" "$TODO_FILE"; then
        if [ $TODOTXT_VERBOSE -gt 0 ]; then
            newtodo=$(sed "$item!d" "$TODO_FILE")
            echo "$item $newtodo"
	fi
    else
        die "TODO: Error appending task $item."
    fi
    ;;

"archive" )
    archive;;

"del" | "rm" )
    # replace deleted line with a blank line when TODOTXT_PRESERVE_LINE_NUMBERS is 1
    errmsg="usage: $TODO_SH del ITEM# [TERM]"
    item=$2
    [ -z "$item" ] && die "$errmsg"
    [[ "$item" = +([0-9]) ]] || die "$errmsg"
    DELETEME=$(sed "$item!d" "$TODO_FILE")
    [ -z "$DELETEME" ] && die "TODO: No task $item."

    if [ -z "$3" ]; then
        if  [ $TODOTXT_FORCE = 0 ]; then
            echo "Delete '$DELETEME'?  (y/n)"
            read ANSWER
        else
            ANSWER="y"
        fi
        if [ "$ANSWER" = "y" ]; then
            if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
                # delete line (changes line numbers)
                sed -i.bak -e $item"s/^.*//" -e '/./!d' "$TODO_FILE"
            else
                # leave blank line behind (preserves line numbers)
                sed -i.bak -e $item"s/^.*//" "$TODO_FILE"
            fi
            if [ $TODOTXT_VERBOSE -gt 0 ]; then
                echo "$item $DELETEME"
                echo "TODO: $item deleted."
            fi
        else
            echo "TODO: No tasks were deleted."
        fi
    else
        sed -i.bak \
            -e $item"s/^\((.) \)\{0,1\} *$3 */\1/g" \
            -e $item"s/ *$3 *\$//g" \
            -e $item"s/  *$3 */ /g" \
            -e $item"s/ *$3  */ /g" \
            -e $item"s/$3//g" \
            "$TODO_FILE"
        newtodo=$(sed "$item!d" "$TODO_FILE")
        if [ "$DELETEME" = "$newtodo" ]; then
            [ $TODOTXT_VERBOSE -gt 0 ] && echo "$item $DELETEME"
            die "TODO: '$3' not found; no removal done."
        fi
        if [ $TODOTXT_VERBOSE -gt 0 ]; then
            echo "$item $DELETEME"
            echo "TODO: Removed '$3' from task."
            echo "$item $newtodo"
        fi
    fi
    ;;

"depri" | "dp" )
    errmsg="usage: $TODO_SH depri ITEM#[, ITEM#, ITEM#, ...]"
    shift;
    [ $# -eq 0 ] && die "$errmsg"

    # Split multiple depri's, if comma separated change to whitespace separated
    # Loop the 'depri' function for each item
    for item in $(echo $* | tr ',' ' '); do
	[[ "$item" = +([0-9]) ]] || die "$errmsg"
	todo=$(sed "$item!d" "$TODO_FILE")
	[ -z "$todo" ] && die "TODO: No task $item."

	if sed "$item!d" "$TODO_FILE" | grep "^(.) " > /dev/null; then
	    sed -i.bak -e $item"s/^(.) //" "$TODO_FILE"
	    if [ $TODOTXT_VERBOSE -gt 0 ]; then
		NEWTODO=$(sed "$item!d" "$TODO_FILE")
		echo "$item $NEWTODO"
		echo "TODO: $item deprioritized."
	    fi
	else
	    echo "TODO: $item is not prioritized."
	fi
    done
    ;;

"do" )
    errmsg="usage: $TODO_SH do ITEM#[, ITEM#, ITEM#, ...]"
    # shift so we get arguments to the do request
    shift;
    [ "$#" -eq 0 ] && die "$errmsg"

    # Split multiple do's, if comma separated change to whitespace separated
    # Loop the 'do' function for each item
    for item in $(echo $* | tr ',' ' '); do 
        [ -z "$item" ] && die "$errmsg"
        [[ "$item" = +([0-9]) ]] || die "$errmsg"

        todo=$(sed "$item!d" "$TODO_FILE")
        [ -z "$todo" ] && die "TODO: No task $item."

        # Check if this item has already been done
        if [ "${todo:0:2}" != "x " ]; then
            now=$(date '+%Y-%m-%d')
            # remove priority once item is done
            sed -i.bak $item"s/^(.) //" "$TODO_FILE"
            sed -i.bak $item"s|^|x $now |" "$TODO_FILE"
            if [ $TODOTXT_VERBOSE -gt 0 ]; then
                newtodo=$(sed "$item!d" "$TODO_FILE")
                echo "$item $newtodo"
                echo "TODO: $item marked as done."
	    fi
        else
            echo "TODO: $item is already marked done."
        fi
    done

    if [ $TODOTXT_AUTO_ARCHIVE = 1 ]; then
        archive
    fi
    ;;

"help" )
    if [ -t 1 ] ; then # STDOUT is a TTY
        if which "${PAGER:-less}" >/dev/null 2>&1; then
            # we have a working PAGER (or less as a default)
            help | "${PAGER:-less}" && exit 0
        fi
    fi
    help # just in case something failed above, we go ahead and just spew to STDOUT
    ;;

"list" | "ls" )
    shift  ## Was ls; new $1 is first search term
    _list "$TODO_FILE" "$@"
    ;;

"listall" | "lsa" )
    shift  ## Was lsa; new $1 is first search term

    cat "$TODO_FILE" "$DONE_FILE" > "$TMP_FILE"
    _list "$TMP_FILE" "$@"
    ;;

"listfile" | "lf" )
    shift  ## Was listfile, next $1 is file name
    FILE="$1"
    shift  ## Was filename; next $1 is first search term

    _list "$FILE" "$@"
    ;;

"listcon" | "lsc" )
    grep -o '[^ ]*@[^ ]\+' "$TODO_FILE" | grep '^@' | sort -u
    ;;

"listproj" | "lsprj" )
    grep -o '[^ ]*+[^ ]\+' "$TODO_FILE" | grep '^+' | sort -u
    ;;

"listpri" | "lsp" )
    shift ## was "listpri", new $1 is priority to list or first TERM

    if [ "${1:-}" ]
    then
        ## A priority was specified
        pri=$( printf "%s\n" "$1" | tr 'a-z' 'A-Z' | grep '^[A-Z]$' ) || {
            die "usage: $TODO_SH listpri PRIORITY
note: PRIORITY must a single letter from A to Z."
        }
    else
        ## No priority specified; show all priority tasks
        pri="[A-Z]"
    fi

    post_filter_command="grep '^ *[0-9]\+ (${pri}) '"
    _list "$TODO_FILE" "$@"
    ;;

"move" | "mv" )
    # replace moved line with a blank line when TODOTXT_PRESERVE_LINE_NUMBERS is 1
    errmsg="usage: $TODO_SH mv ITEM# DEST [SRC]"
    item=$2
    dest="$TODO_DIR/$3"
    src="$TODO_DIR/$4"

    [ -z "$item" ] && die "$errmsg"
    [ -z "$4" ] && src="$TODO_FILE"
    [ -z "$dest" ] && die "$errmsg"

    [[ "$item" = +([0-9]) ]] || die "$errmsg"

    [ -f "$src" ] || die "TODO: Source file $src does not exist."
    [ -f "$dest" ] || die "TODO: Destination file $dest does not exist."

    MOVEME=$(sed "$item!d" "$src")
    [ -z "$MOVEME" ] && die "$item: No such item in $src."
    if  [ $TODOTXT_FORCE = 0 ]; then
        echo "Move '$MOVEME' from $src to $dest? (y/n)"
        read ANSWER
    else
        ANSWER="y"
    fi
    if [ "$ANSWER" = "y" ]; then
        if [ $TODOTXT_PRESERVE_LINE_NUMBERS = 0 ]; then
            # delete line (changes line numbers)
            sed -i.bak -e $item"s/^.*//" -e '/./!d' "$src"
        else
            # leave blank line behind (preserves line numbers)
            sed -i.bak -e $item"s/^.*//" "$src"
        fi
        echo "$MOVEME" >> "$dest"

        if [ $TODOTXT_VERBOSE -gt 0 ]; then
            echo "$item $MOVEME"
            echo "TODO: $item moved from '$src' to '$dest'."
        fi
    else
        echo "TODO: No tasks moved."
    fi
    ;;

"prepend" | "prep" )
    errmsg="usage: $TODO_SH prepend ITEM# \"TEXT TO PREPEND\""
    replaceOrPrepend 'prepend' "$@"
    ;;

"pri" | "p" )
    item=$2
    newpri=$( printf "%s\n" "$3" | tr 'a-z' 'A-Z' )

    errmsg="usage: $TODO_SH pri ITEM# PRIORITY
note: PRIORITY must be anywhere from A to Z."

    [ "$#" -ne 3 ] && die "$errmsg"
    [[ "$item" = +([0-9]) ]] || die "$errmsg"
    [[ "$newpri" = @([A-Z]) ]] || die "$errmsg"

    oldpri=$(sed -ne $item's/^(\(.\)) .*/\1/p' "$TODO_FILE")
    if [ "$oldpri" != "$newpri" ]; then
        sed -i.bak -e $item"s/^(.) //" -e $item"s/^/($newpri) /" "$TODO_FILE"
    fi
    if [ $TODOTXT_VERBOSE -gt 0 ]; then
        NEWTODO=$(sed "$item!d" "$TODO_FILE")
        echo "$item $NEWTODO"
        if [ "$oldpri" != "$newpri" ]; then
            if [ "$oldpri" ]; then
                echo "TODO: $item re-prioritized from ($oldpri) to ($newpri)."
            else
                echo "TODO: $item prioritized ($newpri)."
            fi
        fi
    fi
    if [ "$oldpri" = "$newpri" ]; then
        echo "TODO: $item already prioritized ($newpri)."
    fi
    ;;

"replace" )
    errmsg="usage: $TODO_SH replace ITEM# \"UPDATED ITEM\""
    replaceOrPrepend 'replace' "$@"
    ;;

"report" )
    #archive first
    sed '/^x /!d' "$TODO_FILE" >> "$DONE_FILE"
    sed -i.bak '/^x /d' "$TODO_FILE"

    NUMLINES=$( sed -n '$ =' "$TODO_FILE" )
    if [ ${NUMLINES:-0} = "0" ]; then
         echo "datetime todos dones" >> "$REPORT_FILE"
    fi
    #now report
    TOTAL=$( sed -n '$ =' "$TODO_FILE" )
    TDONE=$( sed -n '$ =' "$DONE_FILE" )
    TECHO=$(echo $(date +%Y-%m-%d-%T); echo ' '; echo ${TOTAL:-0}; echo ' ';
    echo ${TDONE:-0})
    echo $TECHO >> "$REPORT_FILE"
    [ $TODOTXT_VERBOSE -gt 0 ] && echo "TODO: Report file updated."
    cat "$REPORT_FILE"
    ;;

* )
    usage;;
esac

